# CD workflow to publish a new version of the library on Nuget.org
name: Liquid.Repository.EntityFramework library pack and push to Nuget.org

on:
  push:
    branches: [ main ]
    paths:
    - 'src/Liquid.Repository.EntityFramework/**'
    
  pull_request:
    branches: [ main ]
    paths:
    - 'src/Liquid.Repository.EntityFramework/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo Pull Request
      if: github.event_name == 'pull_request'
      uses: actions/checkout@v2
      with:
        ref: ${{github.event.pull_request.head.ref}}
        repository: ${{github.event.pull_request.head.repo.full_name}}
    
    - name: Checkout repo Push
      if: github.event_name == 'push'
      uses: actions/checkout@v2
    
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1.7.2
      with:
        # SDK version to use. Examples: 2.2.104, 3.1, 3.1.x
        dotnet-version: 3.1.x

    - name: Restore dependencies
      run: dotnet restore src/Liquid.Repository.EntityFramework/Liquid.Repository.EntityFramework.csproj

    - name: Build Project
      run: dotnet build src/Liquid.Repository.EntityFramework/Liquid.Repository.EntityFramework.csproj --configuration Release --no-restore

    - name: Start Redis
      uses: supercharge/redis-github-action@1.2.0
      with:
        redis-version: 6 

    - name: Run Tests
      run: dotnet test test/Liquid.Repository.EntityFramework.Tests/*Tests.csproj --settings $GITHUB_WORKSPACE/test/CodeCoverage.runsettings
      
    - name: Nuget Pack
      run: dotnet pack --no-build --configuration Release src/Liquid.Repository.EntityFramework/Liquid.Repository.EntityFramework.csproj --output .

    - name: (CI/CD) Build and Analyze Project
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_EF }}
      run: |
        dotnet sonarscanner begin /k:"Avanade_Liquid.Repository.EntityFramework" /o:"avanade-1" /d:sonar.login="${{secrets.SONAR_TOKEN_EF}}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vstest.reportsPaths=$GITHUB_WORKSPACE/test/testresults/*.trx /d:sonar.coverageReportPaths=$GITHUB_WORKSPACE/test/coverlet/reports/SonarQube.xml
        dotnet build src/Liquid.Repository.EntityFramework/Liquid.Repository.EntityFramework.csproj --configuration Release --no-restore
        dotnet test test/Liquid.Repository.EntityFramework.Tests/*Tests.csproj --collect:"XPlat Code Coverage" --logger trx --results-directory $GITHUB_WORKSPACE/test/testresults
        reportgenerator -reports:$GITHUB_WORKSPACE/test/testresults/**/coverage.cobertura.xml -targetdir:$GITHUB_WORKSPACE/test/coverlet/reports -reporttypes:"SonarQube"
        dotnet sonarscanner end /d:sonar.login="${{secrets.SONAR_TOKEN_EF}}"
      
    - name: PushNuget
      if: github.event_name == 'push' 
      run: dotnet nuget push *.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{secrets.PUBLISH_TO_NUGET_ORG}} --skip-duplicate
